Tokens: (\\ is the escape)
<delimiter>: "\n+\t+ "
<assign-op>: "="
<algebraic-op>: "\\++-+\\*+/"
<boolean-op>: "==+<+>+!=+<=+>="
<left-roundb>: "\\("
<right-roundb>: "\\)"
<left-squareb>: "["
<right-squareb>: "]"
<left-curlyb>: "{"
<right-curlyb>: "}"
<statement>: ";"
<argstop>: ","
<logical-not>: "!"
<if>: "if"
<while>: "while"
<break>: "break"
<else>: "else"
<return>: "return"
<type>: "int+char+float"
<number>: "(0+1+2+3+4+5+6+7+8+9)((0+1+2+3+4+5+6+7+8+9)*)"

<name>: "(a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+A+B+C+E+F+G+H+I+L+M+N+O+P+Q+R+S+T+U+V+W+X+Y+Z+$+_)((a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+A+B+C+E+F+G+H+I+L+M+N+O+P+Q+R+S+T+U+V+W+X+Y+Z+0+1+2+3+4+5+6+7+8+9+$+_)*)"

<string>: "\"((a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+A+B+C+E+F+G+H+I+L+M+N+O+P+Q+R+S+T+U+V+W+X+Y+Z+0+1+2+3+4+5+6+7+8+9+$+_+\\\\+/+ +<+>+&+\\++-+#+[+]+=+:+?+^+,+.+;+\\*)*)\""

<char>: "'(a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+A+B+C+E+F+G+H+I+L+M+N+O+P+Q+R+S+T+U+V+W+X+Y+Z+0+1+2+3+4+5+6+7+8+9+$+_+\\\\+/+ +<+>+&+\\++-+#+[+]+=+:+?+^+,+.+;+\\*)'"

Grammar for SimpleStupid language: (# is the epsilon)

<DelimiterList> := <delimiter> | 
			<delimiter><DelimiterList>

<ArgSeparator> := <argstop> |
			<DelimiterList><argstop> | 
			<argstop><DelimiterList> | 
			<DelimiterList><argstop><DelimiterList>
<Variable> := <name>

<Expr> := <Number> | 
		<string> |
		<char> |
		<Call> |
		<Variable> |
		<left-roundb><Expr><right-roundb> |
		<BoolExpr> |
		<Arithmetic> |
		<DelimiterList><Expr> |
		<Expr><DelimiterList> |
		<DelimiterList><Expr><DelimiterList>

<ParamList> := <Type><DelimiterList><Variable> |
			<Type><DelimiterList><Variable><ArgSeparator><ParamList>

<ExprList> := <Expr> |
		<Expr><ArgSeparator><ExprList> |
		<DelimiterList><Expr><ArgSeparator><ExprList>

<Call> := <Variable><left-roundb><ExprList><right-roundb> |
		<Variable><DelimiterList><left-roundb><ExprList><right-roundb>

<BoolOP> := <boolean-op> |
		<DelimiterList><boolean-op> |
		<boolean-op><DelimiterList> |
		<DelimiterList><boolean-op><DelimiterList>

<BoolExpr> :=  <Expr><BoolOP><BoolExpr>
		<logical-not><BoolExpr> |
		<left-roundb><BoolExpr><right-roundb> |
		<Expr>

<MulExpr> := <Expr><arithmetic-op><MulExpr> |
		<MulExpr> / <MulExpr> |
		(<MulExpr>) |
		<BoolExpr> |
		<Number> |
		<Call> |
		<Variable> |
		<Variable>[<Number>] |
		<Char>

<Arithmetic> := <Arithmetic>+<Arithmetic> |
		<Arithmetic>-<Arithmetic> |
		(<Arithmetic>) |
		<MulExpr> |
		<Number> |
		<Call> |
		<Variable> |
		<Variable>[<Number>]



<StatementList> := <Statement> | 
		<Statement><StatementList>

<Statement> := <Expr>; | 
		<Variable> = <Expr>; |
		{<StatementList>} |
		<Type> <Variable>; |
		<Type> <Variable> = <Expr>; |
		<Type>[] <Variable>; |
		<Type>[<Number>] <Variable>; |
		<Type>[<Number>] <Variable> = {<ExprList>}; |
		<Type> <Variable>(){<Statement>} |
		<Type> <Variable>(<ParamList>){<Statement>} |
		<if>(<BoolExpr>)<Statement> |
		<if>(<BoolExpr>)<Statement><else> <Statement> |
		<while>(<BoolExpr>)<Statement>
		<break>;

<Program> := <StatementList> |
		null