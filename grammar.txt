Tokens: (\\ is the escape)
<delimiter>: "\n+\t+ "
<define-op>: ":="
<left-roundb>: "\\("
<right-roundb>: "\\)"
<left-squareb>: "["
<right-squareb>: "]"
<end-statement>: ";"
<argstop>: ","
<number>: "(0+1+2+3+4+5+6+7+8+9)((0+1+2+3+4+5+6+7+8+9)*)"

<name>: "(a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+A+B+C+E+F+G+H+I+L+M+N+O+P+Q+R+S+T+U+V+W+X+Y+Z+$+_)((a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+A+B+C+E+F+G+H+I+L+M+N+O+P+Q+R+S+T+U+V+W+X+Y+Z+0+1+2+3+4+5+6+7+8+9+$+_)*)"

<string>: "\"((a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+A+B+C+E+F+G+H+I+L+M+N+O+P+Q+R+S+T+U+V+W+X+Y+Z+0+1+2+3+4+5+6+7+8+9+$+_+\\\\+/+ +<+>+&+\\++-+#+[+]+=+:+?+^+,+.+;+\\*)*)\""

<char>: "'(a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+A+B+C+E+F+G+H+I+L+M+N+O+P+Q+R+S+T+U+V+W+X+Y+Z+0+1+2+3+4+5+6+7+8+9+$+_+\\\\+/+ +<+>+&+\\++-+#+[+]+=+:+?+^+,+.+;+\\*)'"

Grammar for lambda language: (# is the epsilon)

/*** Wrapping the tokens into an unlimited amount of Delimiters (spaces, tabs, newlines) ***/

<DelimiterList> := <delimiter> | 
			<delimiter><DelimiterList>

<Define-OP> := <define-op> |
			<define-op><DelimiterList> |
			<DelimiterList><define-op> |
			<DelimiterList><define-op><DelimiterList>

<Name> := <name> |
				<DelimiterList><name> |
				<name><DelimiterList> |
				<DelimiterList><name><DelimiterList>

<String> := <string> |
				<DelimiterList><string> |
				<string><DelimiterList> |
				<DelimiterList><string><DelimiterList>

<Char> := <char> |
				<DelimiterList><char> |
				<char><DelimiterList> |
				<DelimiterList><char><DelimiterList>

<Number> := <number> |
				<DelimiterList><number> |
				<number><DelimiterList> |
				<DelimiterList><number><DelimiterList>

<ArgSeparator> := <argstop> |
				<DelimiterList><argstop> |
				<argstop><DelimiterList> |
				<DelimiterList><argstop><DelimiterList>

<End-Statement> := <end-statement> |
				<DelimiterList><end-statement> |
				<end-statement><DelimiterList> |
				<DelimiterList><end-statement><DelimiterList>

<Right-squareb> := <right-squareb> |
				<DelimiterList><right-squareb> |
				<right-squareb><DelimiterList> |
				<DelimiterList><right-squareb><DelimiterList>

<Left-squareb> := <left-squareb> |
				<DelimiterList><left-squareb> |
				<left-squareb><DelimiterList> |
				<DelimiterList><left-squareb><DelimiterList>

<Right-roundb> := <right-roundb> |
				<DelimiterList><right-roundb> |
				<right-roundb><DelimiterList> |
				<DelimiterList><right-roundb><DelimiterList>

<Left-roundb> := <left-roundb> |
				<DelimiterList><left-roundb> |
				<left-roundb><DelimiterList> |
				<DelimiterList><left-roundb><DelimiterList>


/*** ************************** ***/

<Parameter> := <Name> |
		<Number> |
		<String> |
		<Char>

<ParamList> := <Parameter><ArgSeparator><ParamList> |
		<Parameter>

<BaseCall> := <Name><Left-roundb><ParamList><Right-roundb>

<BaseCallList> := <BaseCall><ArgSeparator><BaseCallList> |
		<BaseCall>

<StepCall> := <Name><Left-roundb><StepCall><Right-roundb> |
		<BaseCallList>

<StepCallList> := <StepCall><ArgSeparator><StepCallList> |
		<StepCall>

<TrueCall> := <Name><Left-roundb><StepCallList><Right-roundb> |
		<BaseCall>

<Definition> := <BaseCall><Define-OP><TrueCall>

<Statement> := <Definition><End-Statement> |
		<Call><End-Statement>

<StatementList> := <Statement><StatementList> |
		<Statement>
		
<Program> := <StatementList> |
		#
