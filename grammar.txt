Tokens: (\\ is the escape)
<delimiter>: "\n+\t+ "
<assign-op>: "="
<arithm-op>: "\\++-"
<mul-op>: "\\*+/"
<boolean-op>: "==+<+>+!=+<=+>="
<left-roundb>: "\\("
<right-roundb>: "\\)"
<left-squareb>: "["
<right-squareb>: "]"
<left-curlyb>: "{"
<right-curlyb>: "}"
<statement>: ";"
<argstop>: ","
<logical-not>: "!"
<if>: "if"
<while>: "while"
<break>: "break"
<else>: "else"
<return>: "return"
<type>: "int+char+float"
<number>: "(0+1+2+3+4+5+6+7+8+9)((0+1+2+3+4+5+6+7+8+9)*)"

<name>: "(a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+A+B+C+E+F+G+H+I+L+M+N+O+P+Q+R+S+T+U+V+W+X+Y+Z+$+_)((a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+A+B+C+E+F+G+H+I+L+M+N+O+P+Q+R+S+T+U+V+W+X+Y+Z+0+1+2+3+4+5+6+7+8+9+$+_)*)"

<string>: "\"((a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+A+B+C+E+F+G+H+I+L+M+N+O+P+Q+R+S+T+U+V+W+X+Y+Z+0+1+2+3+4+5+6+7+8+9+$+_+\\\\+/+ +<+>+&+\\++-+#+[+]+=+:+?+^+,+.+;+\\*)*)\""

<char>: "'(a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+A+B+C+E+F+G+H+I+L+M+N+O+P+Q+R+S+T+U+V+W+X+Y+Z+0+1+2+3+4+5+6+7+8+9+$+_+\\\\+/+ +<+>+&+\\++-+#+[+]+=+:+?+^+,+.+;+\\*)'"

Grammar for SimpleStupid language: (# is the epsilon)

/*** Wrapping the tokens into an unlimited amount of Delimiters (spaces, tabs, newlines) ***/

<DelimiterList> := <delimiter> | 
			<delimiter><DelimiterList>

<ArgSeparator> := <argstop> |
			<DelimiterList><argstop> | 
			<argstop><DelimiterList> | 
			<DelimiterList><argstop><DelimiterList>

<Variable> := <name> |
				<DelimiterList><name> |
				<name><DelimiterList> |
				<DelimiterList><name><DelimiterList>

<String> := <string> |
				<DelimiterList><string> |
				<string><DelimiterList> |
				<DelimiterList><string><DelimiterList>

<Char> := <char> |
				<DelimiterList><char> |
				<char><DelimiterList> |
				<DelimiterList><char><DelimiterList>

<Number> := <number> |
				<DelimiterList><number> |
				<number><DelimiterList> |
				<DelimiterList><number><DelimiterList>

<Type> := <type> |
				<DelimiterList><type> |
				<type><DelimiterList> |
				<DelimiterList><type><DelimiterList>

<Return> := <return> |
				<DelimiterList><return> |
				<return><DelimiterList> |
				<DelimiterList><return><DelimiterList>

<Else> := <else> |
				<DelimiterList><else> |
				<else><DelimiterList> |
				<DelimiterList><else><DelimiterList>

<Break> := <break> |
				<DelimiterList><break> |
				<break><DelimiterList> |
				<DelimiterList><break><DelimiterList>

<While> := <while> |
				<DelimiterList><while> |
				<while><DelimiterList> |
				<DelimiterList><while><DelimiterList>
<... ETC ...>

/*** ************************** ***/

<Array> := <Variable><Left-squareb><Number><Right-squareb>

<Expr> := <Number> | 
		<String> |
		<Char> |
		<Variable> |
		<Array> |
		<left-roundb><Expr><right-roundb>

<VarList> := <Variable><ArgSeparator><Varlist> |
			 <Array><ArgSeparator><VarList> |
		<Variable> |
		<Array>

<ExprList> := <Expr> |
		<Expr><ArgSeparator><ExprList> |
		<DelimiterList><Expr><ArgSeparator><ExprList>

<Call> := <Variable><left-roundb><ExprList><right-roundb> |
		<Variable><DelimiterList><left-roundb><ExprList><right-roundb>

<MulExpr> := <Expr><Mul-OP><MulExpr> |
		<Call><Mul-OP><MulExpr> |
		<Expr> |
		<Call>
		
<Arithmetic> := <Expr><Arithmetic-OP><Arithmetic> |
		<Call><Arithmetic-OP><Arithmetic> |
		<MulExpr> |
		<Expr> |
		<Call>

<AssignExpr> := <Variable><Assign-OP><AssignExpr> |
		<Variable><Assign-OP><Call> |
		<Variable> |
		<Call>

<BoolExpr> := <Logical-not><BoolExpr> |
		<Expr><BoolOP><BoolExpr> |
		<Call><BoolOP><BoolExpr> |
		<AssignExpr> |
		<Arithmetic> |
		<Expr> |
		<Call>

<AllExpr> := <AssignExpr> |
		<Arithmetic> |
		<BoolExpr>

<Declaration> := <Type><DelimiterList><VarList>

<Statement> := <Left-curlyb><StatementList><Right-curlyb> |
		<Declaration><End-Statement> |
		<AllExpr><End-Statement> |
		<If><Left-roundb><BoolExpr><Right-roundb><Statement> |
		<If><Left-roundb><BoolExpr><Right-roundb><Statement><Else><Statement> |
		<While><Left-roundb><BoolExpr><Right-roundb><Statement> |
		<break><End-Statement>

<StatementList> := <Statement> | 
		<Statement><StatementList>

<Program> := <StatementList> |
		#